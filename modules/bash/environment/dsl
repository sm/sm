#!/usr/bin/env bash

#
# ## command_exists()
#
# Checks to see whether a command exists within the current environment and PATH
#
# ### Input Parameters
#
# First parameter is a command name.
#
# ### Stream Outputs
#
# None.
#
# ### Environmental effects
#
# none.
#
# ### return codes
#
# 0 if the command was found in the current environment
# 1 if the command was not found in the current environment
#
# ### failure scenarios
#
# Fails if no command name was given.
#
# ### usage examples
#
#     user$ command_exists adsf
#     user$ echo $?
#     1
#
#     user$ command_exists ls
#     user$ echo $?
#     0
#
command_exists()
{
  local _name="${1:-}"

  if [[ -n "${_name}" ]]
  then
    if command -v "${_name}" > /dev/null 2>&1
    then
      return 0
    else
      return 1
    fi
  else
    fail "Cannot test if command exists as no command name was given."
  fi
}

#
# ## is_a_function()
#
# Checks to see whether a named function exists within the current environment
#
# ### Input Parameters
#
# First parameter is a function name.
#
# ### Stream Outputs
#
# None.
#
# ### Environmental effects
#
# none.
#
# ### return codes
#
# 0 if the function exists
# 1 if the function does not exist
#
# ### failure scenarios
#
# Fails if no function name was given.
#
# ### usage examples
#
#     user$ is_a_function rvm
#     user$ echo $?
#     0
#
#     user$ is_a_function asdf
#     user$ echo $?
#     1
#
#     user$ is_a_function ls
#     user$ echo $?
#     1
#
is_a_function()
{
  local _name="${1:-}"

  if [[ -n "${_name}" ]]
  then
    if declare -f "${_name}" >/dev/null 2>&1
    then
      return 0
    else
      return 1
    fi
  else
    fail "Cannot test if function exists as no function name was given."
  fi
}

#
# ## shell_is_interactive()
#
# Checks if the currently running shell is interactive (user controlled).
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# None.
#
# ### Environmental effects
#
# none.
#
# ### return codes
#
# 0 if the shell is interactive (user controlled)
# 1 if the shell is not interactive
#
# ### failure scenarios
#
# None currently.
#
# ### usage examples
#
# user$ cat $HOME/test
# #!/usr/bin/env bash
# source "/usr/local/bdsm/modules/bash/core/initialize" # Load BDSM framework core.
# modules environment # Load the trace module.
#
# if shell_is_interactive
# then
#   echo "Shell is Interactive! "
# else
#   echo "Shell is Not Interactive! "
# fi
#
# user$ "$HOME/test"
# Shell is Not Interactive!
#
# user$ source "$HOME/test"
# Shell is Interactive!
#
shell_is_interactive()
{
  if [[ "$-" = *i* ]]
  then
    return 0
  else
    return 1
  fi
}

