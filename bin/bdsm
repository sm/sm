#!/usr/bin/env bash
#
# Badass Delectable Scripting Management (BDSM) Framework
#
# Copyright (c) 2009-2011 Wayne E. Seguin
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Load System then User Configuration, if exists.
. /etc/profile

unset prefix_path bdsm_path

if [[ $MACHTYPE = *solaris* ]]
then
  export PATH="/usr/local/bin:/opt/local/bin:/usr/sfw/bin:/usr/sbin:/usr/bin"
fi

# Clean environment of all *_path variables.
paths=(prefix_path $(env | awk -F= '/_path=/{print $1}' | sort))

unset "${paths[@]}"

for file in /etc/bdsmrc "$HOME/.bdsmrc"
do
  if [[ -s "${file}" ]]
  then
    . "${file}"
  fi
done

# In case bdsm is being called from within a hook for example, we unset these:
unset extension action

initial_pwd="$PWD" # record this early on.

# The default prefix is /usr/local,
# this should be set to where BDSM is installed to in /etc/bdsmrc
if (( UID == 0 ))
then
  true "${prefix_path:=/usr/local}"
else
  true "${prefix_path:="$HOME"}"
fi

if [[ -z "${bdsm_path:-}" ]]
then
  if [[ "$prefix_path" = "$HOME" ]]
  then
    bdsm_path="${prefix_path}.bdsm"
  else
    bdsm_path="${prefix_path}/bdsm"
  fi
fi
modules_path="${bdsm_path}/modules"

export prefix_path bdsm_path modules_path initial_pwd extension_action_calls=0

# Load BDSM shell DSL and initialize for BDSM core itself manually.
# Ensure that backtrace and logging are defined first as everything depends on them.
# Then load the main BDSM CLI
. "${modules_path}/shell/core/dsl"
. "${modules_path}/shell/core/initialize"
. "${modules_path}/shell/core/cli"

if [[ -n "${error_message}" ]]
then
  error "$error_message"
fi

disable_backtrace
extension_action
