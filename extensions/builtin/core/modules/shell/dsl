#!/usr/bin/env bash

bdsm_development_setup()
{
  local _component _separator _string

  printf -v _separator '%*s' "${_columns:-${COLUMNS:-80}}"

  true "${projects_path:="$HOME/projects"}"

  log "\nBDSM development environment setup"

  log "\n=> configuration\n${_separator// /=}"

  if file_contains "$HOME/.bash_profile" "projects_path="
  then
    log "  * projects_path is already set in $HOME/.bash_profile."
  else
    log 'export projects_path="$HOME/projects"' \
      append to "$HOME/.bash_profile"

    log "  * Setting projects_path in $HOME/.bash_profile."
  fi

  if file_contains "$HOME/.bash_profile" "modules/bash/project/interactive"
  then
    log "  * project functions are setup in $HOME/.bash_profile."
  else
    log "  * project functions are now setup in $HOME/.bash_profile."

    log "[[ -s \"${modules_path}/shell/project/interactive\" ]] && source \"${modules_path}/shell/project/interactive\""  \
      append to "$HOME/.bash_profile"
  fi

  ensure_paths_exist "${projects_path}/bdsm"

  ensure_files_exist "${HOME}/.bdsmrc"

  enter "${projects_path}/bdsm"

  for _component in core extensions site
  do
    log "\n=> ${_component}\n${_separator// /=}"
    if file_contains "$HOME/.bdsmrc" "${_component}_development_path"
    then
      log "  * ${_component}_development_path is already set in .bdsmrc"
    else
      log "export ${_component}_development_path=\"${projects_path}/bdsm/${_component}\"" \
        append to "$HOME/.bdsmrc"
      log "Setting ${_component}_development_path in .bdsmrc"
    fi

    if path_exists "${_component}"
    then
      log "  * Repository already exists at $PWD/${_component}/"
    else
      log "  * Cloning Core repository into $PWD/${_component}/"
      case ${_component} in
        core)
          _url="https://github.com/wayneeseguin/bdsm"
          ;;
        *)
          _url="https://github.com/wayneeseguin/bdsm-${_component}"
          ;;
      esac

      if git clone ${_url} ${_component}
      then
        log "  * ${_component} repository successfully cloned into $PWD/${_component}/"
      else
        error "There was an error cloning ${_component} repository from ${_url} into ${PWD}/${_component}"
      fi
    fi
  done

  log "\nBDSM development environment setup has completed."
}

bdsm_development_update()
{
  NIY
}

fetch_version()
{
  version=$(curl -s "${releases_url}/latest-version.txt" 2>/dev/null) ||
    fail "Unable to fetch version from ${releases_url}/latest-version.txt"
}

md5_match()
{ # TODO: switch this to using system module's os_* DSL
  local archive="$1"

  case "$(uname)" in
    Darwin|FreeBSD)
      archive_md5="$(/sbin/md5 -q "${archive}")"
      ;;

    OpenBSD)
      archive_md5="$(/bin/md5 -q "${archive}")"
      ;;

    Linux|*)
      archive_md5="$(md5sum "${archive}" | awk '{print $1}')"
      ;;
  esac

  [[ "${archive_md5}" == "${md5}" ]]

  return $?
}

fetch()
{ # TODO: Extract fetch dsl into it's own DSL module
  # TODO: allow either curl or wget, defaulting to curl...
  if ! command_exists curl
  then
    fail "bdsm requires curl, which was not found in the PATH :(\nPlease install curl and try again."
  fi

  fetch_command="$fetch_command -O -L --create-dirs -C - " # -s for silent
  (
  enter "$archives_path"

  if [[ -z "${1:-}" ]]
  then
    fail "BUG: $0 called without an argument :/"
  fi

  archive=$(basename "$1")
  download=1

  debug "Fetching $archive"

  # Check first if we have the correct archive
  if file_exists "$archive" && file_exists "$archive.md5"
  then
    debug "Found archive and its md5, testing correctness"

    if (( $(md5sum --status -c "$archive.md5") > 0 ))
    then
      debug "Archive is bad, downloading"
      download=1
    else
      debug "Archive is good, not downloading"
      download=0
      result=0
    fi
  else
    debug "No '${archive}' does not exist or does not match md5, downloading"
    download=1
  fi

  if (( download > 0 ))
  then
    if ! eval $fetch_command "$1"
    then
      retry=0
      if (( result == 78 ))
      then
        error "The requested url does not exist: '$1'"
      elif (( result == 18 ))
      then
        error "Only a part of the file was transferred. Removing and re-trying."
        rm -f "$archive"
        retry=1
      elif (( result == 33 ))
      then
        debug "Remote server does not support 'range' command, removing '$archive'"
        rm -f "$archive"
        retry=1
      else
        error "There was an error, please check $log_path/*.error.log"
      fi

      if (( retry == 1 ))
      then
        if ! eval $fetch_command "$1"
        then
          error "There was an error, please check $log_path/*.error.log"
        fi
      fi
    fi
  fi
  )

  return $0
}

install_release()
{
  archive="$archives_path/bdsm-${version}.tar.gz"

  md5=$(curl -s "${releases_url}/bdsm-${version}.tar.gz.md5" 2>/dev/null)

  if file_exists "${archive}" && ! md5_match
  then
    # Remove old installs, if they exist and have incorrect md5.
    file_exists "$archives_path/bdsm-${version}.tar.gz" &&
      rm -f "$archives_path/bdsm-${version}.tar.gz"
  fi

  ensure_paths_exist "${archives_path}"

  curl -L "${releases_url}/bdsm-${version}.tar.gz" -o "$archive"

  if ! file_matches_md5 "${archive}" "${md5}"
  then
      fail "
Archive package downloaded does not match it's calculated md5 checksum ${md5}:

  $archives_path/bdsm-${version}.tar.gz

Retry the installation and/or check your networking setup.

Halting the installation.
"
  fi

  tar zxf "${archives_path}/bdsm-${version}.tar.gz" -C "$src_path/"

  enter "$src_path/bdsm-${version}"

  ensure_files_are_executable "install"

  ./install
}

perform()
{
  enter "${initial_pwd}"
  "$*"
}

install_remote()
{
  install_bdsm_scm "bdsm-$1" "$1"
}

install_bdsm_scm()
{
  local remote="origin" dir="${1}" owner="${2:-wayneeseguin}"

  scm_get "${owner}/bdsm" "${src_path}/${dir}"

  if (( ${sense_of_humor_flag:=0} == 1 ))
  then
    log "Ahh... that's better...\nIt always feels so nice to get head.\nQuite a load this time eh?\nRemember to get head often!\n"
  fi

  enter "${src_path}/${dir}/"

  exec bash ./install
}

prepare_for_installation()
{
  local directory

  log "  Ensuring that install_path '${install_path}' exists"
  ensure_paths_exist "${install_path}"
  enter "${install_path}"

  log "  Cleansing installation path"
  for directory in "${cleanse_paths[@]}"
  do
    if path_exists "./${directory}"
    then
      rm -rf "./${directory}"
    fi
  done

  log "  Creating installation paths"
  ensure_paths_exist "${directories[@]}" "${aux_paths[@]}"
}

# install internal bdsm extensions from the given user github account
# default user is wayneeseguin
install_internal_extensions()
{
  local _url="${1:-wayneeseguin}/bdsm-extensions"
  local _identifier="$(scm_identifier "${_url}")"
  log "  Installing internal extensions"
  enter "${install_path}/extensions"
  remove_paths "internal"
  scm_get "${_url}" "${install_path}/src/${_identifier}"
  copy_directory "${install_path}/src/${_identifier}" to "internal"
}

migrate_external_extensions()
{
  log "  Migrating external extensions"
  enter "${install_path}/extensions"
  for extension in *
  do
    # skip new directories
    case ${extension} in
      builtin|internal|external)
        continue
        ;;
    esac
    if file_exists "${extension}/.uri" &&
      file_contains "${extension}/.uri" "git://github.com/wayneeseguin/bdsm-extensions"
    then
      # internal extension
      remove "${extension}"
    else
      # external extension
      move_directory "${extension}" "external/${extension}"
      if file_exists "external/${extension}/.uri"
      then
        sed -ie "s/git:\/\/github.com\/\(.*\)\.git/\1/" "external/${extension}/.uri"
      fi
    fi
  done
}

install_core()
{
  local _dir
  log "  Installing core directories (${directories[*]}) into ${install_path}"

  copy_paths --force to "${install_path}/" "${directories[@]}"

  log "  Installing core files (${files[*]}) into ${install_path}"
  copy_files to "${install_path}" ${files[@]}

  log "  Installing builtin extensions"
  copy_paths --force to "${install_path}/extensions/" "extensions/builtin"

}

install_configuration_files()
{
  log "  Ensuring that the configuration files (${configs[*]}) exist in ${install_path}"
  for config_file in "${configs[@]}"
  do
    ensure_files_exist "${install_path}/config/${config_file}"
  done
}

symlink_bdsm()
{
  log "  Linking ${install_path}/bin/bdsm to ${prefix_path}/bin/bdsm"
  link --force "${install_path}/bin/bdsm" to "${prefix_path}/bin/bdsm"

  if path_exists "${prefix_path}/bin"
  then
    link --force "${install_path}/bin/bdsm" to "${prefix_path}/bin/bdsm"
  fi
}

setup_shell_completion()
{
  if user_is_root
  then
    log "  Setting up bdsm shell completion."

    if path_exists "/etc/bash_completion.d"
    then
      completion_prefix="/etc/bash_completion.d"
    else
      completion_prefix="/etc/profile.d"
      ensure_paths_exist "/etc/profile.d/"
    fi

    copy_file from "${install_path}/completion/bdsm.bash" \
      to "${completion_prefix}/bdsm-completion.sh" \
      mode 0755 owner "root"
  fi
}

setup_profile_d()
{
  ensure_paths_exist "${profile_d_path}"

  if user_is_root
  then
    if os_is_darwin
    then
      if ! file_contains /etc/profile "${profile_d_path}"
      then
        log "\nif test -d '${profile_d_path}' ; then for profile in \"${profile_d_path}\"/*.sh ; do if test -x \"\$profile\" ; then . \"\$profile\" ; fi ; done ; unset profile ; fi\n" \
          to /etc/profile
      fi
    fi
  else
    ensure_files_exist "$HOME/.profile" "$HOME/.bashrc" "$HOME/.bash_profile"

    if ! file_contains "$HOME/.bashrc" "$HOME/.profile"
    then
      log "if test -s \"$HOME/.profile\" ; then . \"$HOME/.profile\" ; fi"\
        append to "$HOME/.bashrc"
    fi

    if ! file_contains "$HOME/.bash_profile" "$HOME/.bashrc"
    then
      log "if test -s \"$HOME/.bashrc\" ; then . \"$HOME/.bashrc\" ; fi"\
        append to "$HOME/.bash_profile"
    fi

    if ! file_contains "$HOME/.profile" "${profile_d_path}"
    then
      log "\nif test -d '${profile_d_path}' ; then for profile in \"${profile_d_path}\"/*.sh ; do if test -x \"\$profile\" ; then . \"\$profile\" ; fi ; done ; unset profile ; fi\n" \
        append to "$HOME/.profile"
    fi
  fi

  if ! file_exists "${profile_d_path}/bdsm.sh" ||
     ! file_contains "${profile_d_path}/bdsm.sh" "${packages_path}/active/bin"
  then
    log "PATH=\"${packages_path}/active/bin:${packages_path}/active/sbin:\${PATH}\"\n" \
      to "${profile_d_path}/bdsm.sh"

    chmod_files 0755 "${profile_d_path}/bdsm.sh"
  fi
}

set_bdsm_path()
{
  local file
  local files=(
    "${install_path}/bin/bdsm"
    "${install_path}/extensions/builtin/core/modules/shell/core/initialize"
  )

  for file in "${files[@]}"
  do
    replace_content "^bdsm_path=.*" with "bdsm_path=\"${install_path}\"" in "${file}"
  done
}

setup_bdsmrc()
{
  unset bdsm_path

  for file in /etc/bdsmrc "$HOME/.bdsmrc"
  do
    if [[ -s "${file}" ]]
    then
      source "${file}" || true # Continue if it fails.
    fi
  done

  # The default prefix is /usr/local,
  # this should be set to where BDSM is installed to in /etc/bdsmrc
  prefix_path="${prefix_path:-/usr/local}"

  if [[ -z "${bdsm_path}" ]]
  then
    if [[ "$prefix_path" = "$HOME" ]]
    then
      bdsm_path="${prefix_path}/.bdsm"
    else
      bdsm_path="${prefix_path}/bdsm"
    fi
  fi

  if user_is_root
  then
    ensure_files_exist "/etc/bdsmrc"
    if ! file_contains "/etc/bdsmrc" "bdsm_path="
    then
      log "export bdsm_path=\"${bdsm_path}\"" \
        append to "/etc/bdsmrc"
    fi
  else
    ensure_files_exist "$HOME/.bdsmrc"
    if ! file_contains "$HOME/.bdsmrc" "bdsm_path="
    then
      log "export bdsm_path=\"${bdsm_path}\"" \
        append to "$HOME/.bdsmrc"
    fi
  fi
}

