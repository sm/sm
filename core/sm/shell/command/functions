#!/bin/sh

__sm.command.exists()
{
  builtin hash -r
  builtin command -v "${1}" > /dev/null 2>&1
}

__sm.command.full.name()
{
  builtin hash -r
  builtin command -v "${1}"
}

__sm.command.is.function()
{
  declare -f "${1}" > /dev/null 2>&1
}

__sm.command.run.as()
{
  typeset _user _flags
  _user="$1" _flags=( ${=2} )
  shift 2
  #TODO: find a way for proper passing of params with spaces
  su ${_flags[@]} "${_user}" -c "$*"
}

__sm.command.run()
{
  "$@"
}

__sm.command.detect()
{
  typeset -f __sm_command_detected __sm_command_dotted __sm_command_words
  typeset __string __key __value
  __string="$1"
  shift

  # Error if no command was given
  if [[ -z "${__string}" ]]
  then
    return 1
  fi

  # Iterate through all commands
  while (( $# ))
  do
    __key="$1"

    case "${__key}" in
      (*\=*)
        # If command is mapping, then unwrap its key/value
        __value="${__key#*\=}"
        __key="${__key%%\=*}"
        ;;
      (*)
        # When no mapping then key is value
        __value="${__key}"
        ;;
    esac

    case "${__string} " in
      (${__key}[[:space:]]*)
        # Key matches command
        __sm_command_detected="${__key}"
        __sm_command_dotted=$( __sm.string.to.function.name "${__value}" )
        __sm_command_words=$( __sm.string.number.of.words "${__key}" )
        return 0
        ;;
      (${__value}[[:space:]]*)
        # Value matches command
        __sm_command_detected="${__value}"
        __sm_command_dotted=$( __sm.string.to.function.name "${__value}" )
        __sm_command_words=$( __sm.string.number.of.words "${__value}" )
        return 0
        ;;
    esac

    # Go to next command
    shift
  done

  # In case no long command matched grab first param as command. Todo ? allow disabling
  __string=( ${=__string} )
  __sm_command_detected="${__string[1]}"
  __sm_command_dotted="${__string[1]}"
  __sm_command_words=1
  return 0
}
