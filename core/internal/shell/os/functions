#!/bin/sh

__sm.os.open()
{
  typeset _uri
  _uri="${1:-}"
  (( $# )) && shift || __sm.log.fail "Cannot open URI; No uri was given."

  if __sm.command.exists open
  then
    open "${_uri}"
  elif __sm.command.exists xdg-open
  then
    xdg-open "${_uri}"
  else
    __sm.includes include api/interactive
    if shell is interactive
    then
      if [[ "${_uri}" == file* ]]
      then
        ${EDITOR:-less} "${_uri}"
      else
        ${curl} -s "${_uri}"
      fi
    else
      echo "$_uri"
    fi
  fi
}

__sm.os.type()
{
  typeset _type
  case "$OSTYPE" in
    (*linux*)
      _type="linux"
      ;;
    (*darwin*)
      _type="darwin"
      ;;
    (*bsd*)
      _type="bsd"
      ;;
    (*solaris*)
      _type="solaris"
      ;;
    (*aix*)
      _type="aix"
      ;;
    (*)
      # If the machine type is an unknown category then simply use it.
      _type="$OSTYPE"
      ;;
  esac

  if [[ -n "${1}" ]]
  then
    [[ "${_type}" == "${1}" ]]
  else
    printf "%s\n" "${_type}"
  fi
}

__sm.os.type.is()
{
  __sm.os.type "$1"
}

__sm.os.name()
{
  typeset _type _name
  _type=$(__sm.os.type)
  case ${_type} in
    (aix)
      _name="AIX $(oslevel)"
      ;;
    (bsd)
      _bsd_type=$(uname -s)
      case ${_bsd_type} in
        (DragonFly)
          _name="DragonFly $(uname -r | sed -e 's/ .*//')"
          ;;
        (*)
          _name=$(uname -rs)
          ;;
      esac
      ;;
    (darwin)
      _name="Mac OS X"
      ;;
    (linux)
      if which lsb_release > /dev/null 2>&1
      then
        _name=$(lsb_release -sd)
      elif [[ -f /etc/debian_{release,version} ]]
      then
        _name="Debian $(cat /etc/debian_{release,version})"
      elif [[ -f /etc/fedora-release ]]
      then
        _name=$(sed -E 's/^(.*) release ([0-9]+).*/\1 \2/' < /etc/fedora-release)
      elif [[ -f /etc/gentoo-release ]]
      then
        _name="Gentoo $(sed -e 's/^.* //' < /etc/gentoo-release)"
      elif [[ -f /etc/redhat-release ]]
      then
        _name=$(sed -E 's/^(.*) release ([0-9]+).*/\1 \2/' < /etc/redhat-release)
      elif [[ -f /etc/SuSE-release ]]
      then
        _name=$(head -1 /etc/SuSE-release | cut -d' ' -f1,2)
      else
        __sm.log.warn "Uknown Linux distribution; returning 1."
        return 1
      fi
      ;;
    (solaris)
      if [[ -f /etc/release ]]
      then
        _name=$(head -1 /etc/release | sed -e 's/^ *//' -e 's/\([0-9][0-9]*\).*/\1/')
      else
        __sm.log.warn "Unknown Solaris version; returning 1."
        return 1
      fi
    (*)
      __sm.log.warn "OS name detection for ${_type} has not yet been implemented; returning 1."
      return 1
      ;;
  esac
  echo ${_name}
}

__sm.os.subtype()
{
  typeset _name
  _name=$(__sm.os.name)

  # Make sure we got a name
  [ $? ] || return 1

  echo ${_name} | sed -e 's/ [0-9.][0-9.]*$//' -e 's/ /_/g' | tr 'A-Z' 'a-z'
}

__sm.os.cpu.count()
{
  typeset _cpu_count
  _cpu_count=1

  if __sm.os.type.is darwin
  then
    read -r _cpu_count < <(/usr/sbin/sysctl hw.ncpu)
    _cpu_count="${_cpu_count//* }"

  elif __sm.os.type.is linux
  then
    _cpu_count=$(awk '/^processor/{count++} END{print count}' /proc/cpuinfo 2>&1)

  elif __sm.os.type.is solaris
  then
    __sm.log.warn "CPU counting for Solaris has not yet been implemented; returning 1."

  elif __sm.os.type.is bsd
  then
    __sm.log.warn "CPU counting for BSD has not yet been implemented; returning 1."

  elif __sm.os.type.is aix
  then
    __sm.log.warn "CPU counting for AIX has not yet been implemented; returning 1."
  fi

  (( _cpu_count > 0 )) || _cpu_count=1 # Sanity Check

  printf "%d\n" ${_cpu_count}
}

__sm.os.version()
{
  read -r os_version < <(uname -r)
  os_version=${os_version//-*}
  printf "%s\n" "${os_version}"
}

__sm.os.version.major()
{
  typeset _version
  _version=$(__sm.os.version)
  _version="${_version//\.*}"
  printf "%s\n" "${_version}"
}

__sm.os.version.minor()
{
  typeset _version
  _version=$(__sm.os.version)
  _version="${_version#*\.}"
  _version="${_version%\.*}"
  printf "%s\n" "${_version}"
}

__sm.os.version.patch()
{
  typeset _version
  _version=$(__sm.os.version)
  _version="${_version//*\.}"
  printf "%s\n" "${_version}"
}

__sm.os.arch.type()
{
  typeset _arch
  case "${MACHTYPE//-*}" in
    # The machine type is 32 bit.
    # Note that this accounts for Solaris 32 bit as well (i86pc).
    (*i386*|*i686*|*i86pc*)
      _arch="i386"
      ;;
    # The machine type is 64 bit.
    (*x86_64*)
      _arch="x86_64"
      ;;
    # The machine type is PowerPC.
    (*ppc*)
      _arch="ppc"
      ;;
  esac

  if [[ -n "${1}" ]]
  then
    [[ "${_arch}" == "${1}" ]]
  else
    printf "%s\n" "${_arch}"
  fi
}

__sm.os.arch()
{
  printf "%s\n" "${MACHTYPE//-*}"
}

__sm.os.arch.capable()
{
  if __sm.os.type.is darwin
  then
    typeset _string
    read -r _string < <(sysctl hw.cpu64bit_capable)
    if (( ${_string//* } == 1 ))
    then
      if [[ -n "${1}" ]]
      then
        [[ "x86_64" == "${1}" ]]
      else
        printf "%s\n" "x86_64"
      fi
    else
      __sm.os.arch.type $1
    fi
  else
    __sm.os.arch.type $1
  fi
}

__sm.os.arch.type.is()
{
  __sm.os.arch.capable $1
}
