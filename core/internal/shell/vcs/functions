#!/bin/sh

# TODO: Rework this into a 1.0.0 module API

internal_vcs_initialize()
{
  if [[ ! -w $sm_path ]]
  then
    archives_path="$HOME/.sm/archives"
    scm_path="$HOME/.sm/scm"
    src_path="$HOME/.sm/src"
  fi

  [[ -d "${archives_path}" ]] || mkdir -p $archives_path
  [[ -d "${scm_path}" ]]      || mkdir -p $scm_path
  [[ -d "${src_path}" ]]      || mkdir -p $src_path
}

fetch_uri()
{
  trace_filter vcs || set -o xtrace
  fetch_error_initialize "$@"

  typeset vcs_initial_pwd _uri _target _args
  vcs_initial_pwd="$PWD"
  _uri="${1:-}"
  _target="${2:-}"
  _args=()
  (( $# )) && shift || __sm.log.fail "uri must be specified as the first parameter."
  (( $# )) && shift || __sm.log.fail "target path must be specified as the second parameter."

  builtin cd "$initial_pwd"

  unset scm_type
  _args=("${_uri}" "${_target}")
  fetch_uri_parse_args "$@"

  if [[ -z "${scm_type}" ]]
  then
    if ! fetch_uri_detect_scm_type "${_uri}" \
    || [[ -n "${__vcs_failed}" ]]
    then
      fetch_error unknown_scm "uri=${_uri}"
      return $?
    fi
  fi

  __sm.log.debug vcs "type: ${scm_type}, params: ${_args[@]}."

  case "${scm_type}" in
    (path|archive|github|git|svn|hg|fossil)
      __sm.includes include api/vcs/handlers/${scm_type}
      "${scm_type}_get" "${_args[@]}"
      ;;
    (*)
      fetch_error unknown_scm "uri=${_uri}"
      ;;
  esac

  builtin cd "$vcs_initial_pwd"
}

# Example:
#
#  $ ./local --debug=vcs --call=api/vcs/fetch_uris /root ~/tmp/test_uris --fallback-uri /root/test,mpapis/mpapis_test
#
#  DEBUG vcs: type: path, params: /root /home/mpapis/tmp/test_uris.
#  DEBUG vcs: Copying from '/root' to '/home/mpapis/tmp/test_uris' failed.
#  DEBUG vcs: Unknown SCM type (not found) for url '/root/test'.
#  DEBUG vcs: type: github, params: mpapis/mpapis_test /home/mpapis/tmp/test_uris.
#  DEBUG vcs: github -> https://github.com/mpapis/mpapis_test/tarball/master
#  DEBUG vcs: github tarball archive name /home/mpapis/.sm/archives/mpapis_mpapis_test_master.tar.gz.
#  DEBUG vcs: master does not match MD5 checksum #; removing and downloading.
#
fetch_uris()
{
  typeset _uris _target _args _uri
  _uris=( ${=1} )
  _target="${2:-}"
  _args=()
  (( $# )) && shift || __sm.log.fail "uri must be specified as the first parameter."
  (( $# )) && shift || __sm.log.fail "target path must be specified as the second parameter."

  fetch_uri_parse_args "$@"

  for _uri in ${_uris[@]}
  do
    fetch_uri "${_uri}" "${_target}" --on-fail __sm.log.debug ${_args[@]} || true
    case "${__vcs_failed}" in
    (unknown_scm|copy_failed|download_failed|empty_archive|remote_branch_not_found|cannot_checkout_branch|pull_failed|cannot_clone|extracting_archive_failed)
      # in this case continue with next uri
      continue
      ;;
    ("")
      # actually no __sm.log.error spawned, return ok
      return 0
      ;;
    (*) # (unknown_archive_format|cannot_remove|all_uris_failed)
      # those are not download related
      return 1
    esac
  done
  fetch_error all_uris_failed
}


#
# # VCS (SCM) Module
#

fetch_uri_parse_args()
{
  typeset -f fetch_error_handler branch remote revision scm_type md5
  typeset -fa _uris
  typeset _token _allowed_arg

  while (( $# > 0 ))
  do
    _token="$1" && shift
    for _allowed_arg in branch remote revision scm_type md5
    do
      case "${_token}" in
        (*${_allowed_arg})
          eval "${_allowed_arg}=\"${1}\""
          (( $# )) && shift || __sm.log.fail "${_allowed_arg} must be specified after '${_token}'."
          continue 2
          ;;
      esac
    done

    case "${_token}" in
      (--on-fail)
        fetch_error_handler=$1
        (( $# )) && shift || __sm.log.fail "fetch __sm.log.error handler function must be specified after '--on-fail'."
        continue
        ;;
      (--fallback-uri)
        _uris+=( ${1//,/ } )
        (( $# )) && shift || __sm.log.fail "comma separated lit of uris must be specified after '--fallback-uri'."
        continue
        ;;
    esac
    _args+=("${_token}")
  done
}

fetch_update()
{
  typeset _uri _target
  _target="${1:-}"
  (( $# )) && shift || __sm.log.fail "target path must be specified as the second parameter."

  if [[ -d "${_target}" ]] && [[ -s "${_target}/.uri" ]]
  then
    _uri=$( __sm.vcs.read_uri "${_target}/.uri" )
    if [[ -n "${_uri}" ]]
    then
      fetch_uri "${_uri}" "${_target}" "$@"
      return $?
    fi
  fi
  return 1
}

cli_fetch()
{
  typeset _uri _target _args
  _uri="${1:-}"
  _target="${2:-}"
  _args=()
  (( $# )) && shift || __sm.log.error "uri must be specified as the first parameter."
  (( $# )) && shift || __sm.log.error "target path must be specified as the second parameter."
  fetch_uri "${_uri}" "${_target}" --on-fail __sm.log.error "$@"
}

cli_fetch_update()
{
  typeset _target
  _target="${1:-}"
  (( $# )) && shift || __sm.log.error "target path must be specified as the second parameter."
  fetch_update "${_target}" --on-fail __sm.log.error "$@"
}
