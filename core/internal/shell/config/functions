#!/bin/sh

__sm.config.read()
{
  typeset _extension _file _key _variable _prefix _temp _value
  _extension="$1"
  _file="$2"
  _key="$3"
  _variable="$4"
  _prefix="$5"

  if [[ -z "${_variable}" ]]
  then
    _variable="${_key}"
  fi
  if [[ -n "${_prefix}" ]]
  then
    _variable="${_prefix}_${_variable}"
  fi

  # Run search in the same process to initialize cache variables.
  __sm.config.settings.search ${_extension} "${_file}" > /dev/null

  for _file in  $( __sm.config.settings.search ${_extension} "${_file}" )
  do
    [[ -s "${_file}" ]] || continue
    _value=$(awk '/^'"${_key}"'=/ {gsub("'"${_key}"'=",""); print $0}' "${_file}")
    [[ -z "${_value}" ]] || break
  done

  typeset -f ${_variable}
  eval "${_variable}=\"${_value}\""
}

__sm.config.write()
{
  typeset _extension _file _key _value
  _extension="$1"
  _file="$2"
  _key="$3"
  _value="$4"
  # unset, delete / write, set
  case "${value}" in
    (unset|delete)
      sed -i.tmp "s#^${_key}=.*\$##" "${_file}"
      ;;
    (*)
      if ! awk -F= "/^'"${_key}"'=/{print $2}" "${_file}" >/dev/null 2>&1
      then
        echo "${_key}=${_value}" >> "${_file}"
      else # Overwrite.
        sed -i.tmp "s#^${_key}=.*\$#${_key}=${_value}#" "${_file}"
      fi
      ;;
  esac
}

__sm.config.settings.search()
{
  trace_filter config_search || set -o xtrace

  typeset extension setting _path paths
  extension=$1
  setting=$2

  paths=( "/etc/sm/${extension}" "$HOME/.sm/${extension}" ) # Standard paths

  if __sm.extension.path "${extension}"
  then
    paths+=( "${extension_path}/config" )
  fi

  for _path in "${settings_search_path_append[@]}"
  do # Additional paths
    __sm.config.settings.search.path.update "${_path}"
    paths+=( "${_path}/${extension}" )
  done

  for _path in "${paths[@]}"
  do # Print existing paths.
#    if paths exist "${_path}" && ! files are empty "${_path}/${setting}"
    if [[ -d "${_path}" &&  -f "${_path}/${setting}" && -s "${_path}/${setting}" ]]
    then
      printf "${_path}/${setting}\n"
    fi
  done
}

__sm.config.settings.search.path.update()
{
  typeset path _uri
  path=$1

  if __sm.string.contains "${path}" "${__sm_settings_search_cache[*]}"
  then
    return 0
  fi

  if files exist "${path}/.uri" && ! files are empty "${_path}/.uri"
  then
    _uri="$( __sm.vcs.read_uri "${path}/.uri" )"
    fetch_uri "${_uri}" "${path}" >&2
  fi

  __sm_settings_search_cache+=( "${path}" )
}

