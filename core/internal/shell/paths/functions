#!/bin/sh

__sm.paths.move()
{
  typeset _source _target _mode _owner
  _source="$1"
  _target="$2"
  _mode="$3"
  _owner="$4"

  mv "${_source}" "${_target}" ||
    __sm.log.fail "Could not move '${_source}' to '${_target}',"\
    "as the 'mv' command failed with __sm.log.error code '$?'."

  if [[ -n "${_mode}" ]]
  then
    chmod -R "${_mode}" "${_target}" ||
    __sm.log.fail "Could not recursively change mode of '${_target}' to"\
    "${_mode}, as the 'chmod -R' command failed with __sm.log.error code '$?'."
  fi

  if [[ -n "${_owner}" ]]
  then
    chown -R "${_owner}" "${_target}" ||
    __sm.log.fail "Could not recursively change ownership of '${_target}' to"\
    "${_owner}, as the 'chown -R' command failed with __sm.log.error code '$?'."
  fi
}

__sm.paths.enter()
{
  [[ -d "$1" ]] || __sm.log.fail "Path '$1' does not exist."
  builtin cd "$1" ||
    __sm.log.fail "Could not cd into the given path '$1'; "\
      "'cd' command failed with __sm.log.error code '$?'."
}

__sm.paths.exists()
{
  [[ -d "$1" ]]
}

#
__sm.paths.join()
{
  typeset IFS
  IFS='/'
  printf "$*"
}

__sm.paths.expand()
{
  #TODO: replace with ${1:A}
  [[ -d "$1" ]] || __sm.log.fail "Path '$1' does not exist."
  ( builtin cd "$1" ; echo $PWD )
}

__sm.paths.create()
{
  typeset _path
  for _path in "$@"
  do
    if [[ -d "${_path}" ]] || [[ -L "${_path}" && -d "$(readlink "${_path}")" ]]
    then
      continue
    fi

    if [[ -f "${_path}" || -L "${_path}" ]]
    then
      __sm.log.warn "Could not ensure path '${_path}' exists as the path is a file."
    else
      mkdir -p "${_path}" || __sm.log.fail "Could not create the path '${_path}',"\
        "as the 'mkdir' command failed with __sm.log.error code '$?'."
    fi
  done
}

__sm.paths.remove()
{
  typeset -fa removed_paths nonexistant_paths
  typeset _path

  for _path in "$@"
  do
    if [[ -L "${_path}" ]]
    then
      rm -f "${_path}" || __sm.log.fail "Could not remove the entity '${_entity}';"\
          "'rm' command failed with __sm.log.error code '$?'."
      removed_paths+=("${_path}")
    elif [[ -e "${_path}" ]]
    then
      rm -rf "${_path}" || __sm.log.fail "Could not remove the entity '${_entity}';"\
          "'rm' command failed with __sm.log.error code '$?'."
      removed_paths+=("${_path}")

    else
      nonexistant_paths+=("${_path}")
    fi
  done
}

__sm.paths.copy()
{
  typeset _target _flags _path
  _target="$1"
  _flags="$2"
  shift 2

  __sm.paths.create "${_target}"

  for _path in "$@"
  do
    if [[ ! -d "${_path}" ]]
    then
      __sm.log.error "Cannot copy path ${_path} to ${_target};"\
      "Path '${_path}' does not exist (in '$PWD')."
    fi

    cp -Rf "${_path}" "${_target}/" ||
      __sm.log.fail "Could not copy the entity '${_entity}';"\
      "As the 'cp -Rf' command failed with __sm.log.error code '$?'."
  done
}

__sm.paths.chown()
{
  trace_filter filesystem || set -o xtrace
  typeset _identity _flags _path _command
  _identity="$1"
  _flags=( ${=2} )
  shift 2

  for _path in "$@"
  do
    [[ -n "${_path}" ]] || continue

    if [[ ! -e "${_path}" ]]
    then
      __sm.log.fail "Path '${_path}' does not exist."
    fi

    chown ${_flags[*]} ${_identity} "${_path}" ||
      __sm.log.fail "Could not chown the path '${_path}' to '${_identity};"\
      " 'chown' command failed with __sm.log.error code '$?'."
  done
}

__sm.paths.chmod()
{
  trace_filter filesystem || set -o xtrace
  typeset _mode _flags
  _mode="$1"
  _flags=( ${=2} )
  shift 2

  for _path in "$@"
  do
    if [[ ! -d "${_path}" ]]
    then
      __sm.log.fail "Cannot chmod path ${_path} to ${_permissions},"\
      "as the path (directory) does not exist."
    fi

    chmod ${_flags[@]} ${_mode} "${_path}" ||
      __sm.log.fail "Could not chmod the file '${_file}' to "\
      "'${_target}/${_file//*\/},"\
      "as the 'chmod' command failed with __sm.log.error code '$?'."

  done
}

__sm.paths.in()
{
  typeset _path
  _path="${1:-}"
  (( $# )) && shift || __sm.log.fail "Path was not given!"
  [[ -d "${_path}" ]] || __sm.log.fail "'${_path}' is not a path!"

  for dir in "${_path}"/*
  do
    [[ -d "${dir}" ]] || continue
    echo "${dir}"
    __sm.paths.in "${dir}"
  done
}

__sm.paths.within()
{
  typeset _path

  while read -r _path
  do
    [[ -d "${_path}" ]] || continue
    __sm.paths.within "${_path}"
  done < <(__sm.paths.in "$@")
}

__sm.paths.search()
{
  typeset _glob
  _glob="$1"
  shift
  _path=("$@")

  [[ -n "${_glob}" ]] || __sm.log.fail "'${_path}' is not a path!"
  [[ -d "${_path}" ]] || __sm.log.fail "'${_path}' is not a directory!"

  while read _line
  do
    [[ "${_line}" == ${_glob} ]] || continue
    echo "${_line}"
  done < <(__sm.paths.in "${_path}")
}

__sm.paths.absolute()
{
  #TODO: replace with ${1:A} ?
  typeset _path _recorded_path
  _recorded_path=$PWD

  for _path in "$@"
  do
    if [[ -d "${_path}" ]]
    then
      builtin cd "${_path}"
    else
      __sm.log.error "The given path '${_path}' is not a valid directory in the following list '$@'."
    fi
  done

  pwd

  builtin cd "${_recorded_path}"
}
