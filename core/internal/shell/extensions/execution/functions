#!/bin/sh

__sm.extension.actions.type()
{
  typeset -f action_type 
  typeset _path _path_type extension
  _path="${action_path:-}"

  case "${action}" in
    (*\(\))
      action_type="function"
      return 0
      ;;
    (*)
      _path_type="$(file "${_path}/${action}")"
      ;;
  esac

  case "${_path_type}" in

    (*sh[[:space:]]script*|*POSIX[[:space:]]shell*|*Bourne-Again*)
      action_type="shell"
      ;;

    (*ASCII*)
      # Launch with helper DSL, if possible.
      extension="${_path//.}"

      case "${extension}" in
        (shell|zsh|bash|sh)
          action_type="shell"
          #rb) action_type="ruby"   ;;
          ;;
        (*)
          read -r shebang < "${_path}"

          case "${shebang}" in
            *ruby|*rbx|*jruby|*macruby)
              binary="${shebang##*(#|!)}"
              binary="${binary##* }"
              action_type="ruby"
              ;;
            (*)
              if [[ -x "${_path}" ]] ; then
                action_type="binary"
              else
                action_type="not executable"
              fi
              ;;
          esac
          ;;
      esac
      result=$?
      ;;

    (cannot[[:space:]]open)
      action_type="dne"
      ;;

    (*)
      if [[ -x "${_path}" ]]
      then
        action_type="binary"
      else
        action_type="noexec"
      fi
      ;;
  esac

  return $?
}

__sm.extension.modules.include()
{
  typeset _token _namespace module_name
  _namespace=""

  module_name="${extension}"
  __sm.module.include "$module_name"

  while (( $# > 0 ))
  do
    _namespace+="/$1"
    shift

    module_name="${extension}${_namespace}"
    __sm.module.include "$module_name" || true
  done
}

__sm.extension.action.prerequisites()
{
  trace_filter action_pre || set -o xtrace
  typeset _pre _name _action _extension
  _action="${action// *}"
  _extension="${extension// *}"

  _pre=(
    ${_action}_cli
    ${_action}_initialize
  )

  __sm.string.contains "${_action%%_*}.cli" "${_pre[*]}" || _pre+=(
    ${_action%%_*}_cli
    ${_action%%_*}_initialize
  )

  __sm.string.contains "${_extension}.cli" "${_pre[*]}" || _pre+=(
    ${_extension}_cli
    ${_extension}_initialize
  )

  __sm.string.contains "__sm.${_action}.cli" "${_pre[*]}" || _pre+=(
    __sm.${_action}.cli
    __sm.${_action}.initialize
  )

  __sm.string.contains "__sm.${_extension}.cli" "${_pre[*]}" || _pre+=(
    __sm.${_extension}.cli
    __sm.${_extension}.initialize
  )

  for _name in ${_pre[@]}
  do
    if __sm.command.exists ${_name// *}
    then
      ${_name} "${extension_args[@]}"
    fi
  done
}

__sm.extension.run()
{
  trace_filter extension_run || set -o xtrace

  typeset -f action
  typeset _type _path _namespaces requires
  _type="${action_type:-}"
  _path="${action_path:-}"

  builtin cd "${initial_pwd}"

  # Now launch the extension, based on the determined _type.
  case "${_type}" in
    (function)
      _namespaces=${_path##${extension_bin_path}}
      __sm.extension.modules.include ${=_namespaces//\// }
      action=${action%%\(*}
      __sm.extension.action.prerequisites
      __sm.actions.call ${action} "${extension_args[@]}"
      ;;

    (shell)
      [[ "${action##*/}" != help ]] || __sm.includes api/help
      _namespaces=${_path##${extension_bin_path}}
      __sm.extension.modules.include ${=_namespaces//\// }
      __sm.extension.action.prerequisites
      __sm.actions.source "${_path}/${action}" "${extension_args[@]}"
      ;;

    (ruby)
      # Allow env settings via _initialize
      __sm.extension.modules.include ${=_namespaces//\// }
      requires=()
      for script in functions initialize
      do
        requires+=( "-r${__sm_modules_path}/ruby/core/${script}.rb" )
      done

      "${binary:-ruby}" -I"${__sm_modules_path}/ruby" -I"${extension_modules_path}/ruby" \
        ${requires[@]} "${_path}/${action}"
      ;;
    # python|lua|javascript)
      #   ADD "${__sm_modules_path}/${_type}/" to the lib path so the script can require "sm"
      #  "${_path}"
      #  ;;

    (dne|noexec)
      __sm.log.fail "Processing ${action} failed; file type is unknown, file does not exist, or file is not executable."
      ;;

    (binary|*)
      "${_path}/${action}" ${extension_action} "${extension_args[@]}"
      ;;
  esac
}
