#!/bin/sh

extension_version()
{
  typeset -f extension_path
  typeset _extension extension_version
  _extension=$1
  (( $# )) && shift || __sm.log.fail "Cannot retrieve extension version;"\
    " No extension was given."
  true ${extension_path:="${extensions_path}/${_extension}"}

  if files exist "${extension_path}/VERSION"
  then
    read -r extension_version < "${extension_path}/VERSION"
  else
    extension_version="head"
  fi

  log "${extension}-${extension_version}"
}

# ### Usage Examples
#
#     $ cat $HOME/test
#     #!/bin/sm
#     includes api/extensions/manipulation
#     extension_license postgresql
#
#     $ $HOME/test
#     Copyright (c) 2009-2011 Wayne E. Seguin
#
#     Licensed under the Apache License, Version 2.0 (the \"License\");
#     you may not use this file except in compliance with the License.
#     You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an \"AS IS\" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
extension_license()
{
  typeset _extension
  _extension="${1:-${extension}}"

  variable_is_nonempty _extension ||
    __sm.log.fail "Cannot display extension license;"\
    " Extension name was not given."

  cat -v "${extensions_path}/${_extension}/LICENSE"
}

# ### Usage Examples
#
#      $ cat $HOME/test
#      #!/bin/sm
#      includes api/extensions/manipulation
#      __sm.extension.actions "postgresql"
#
#      $ $HOME/test
#      backup configure help initialize install restart start status stop uninstall upgrade
#
#
#
__sm.extension.actions()
{
  NIY
  typeset _extension _files _file _actions
  _extension="${1:-}"
  _actions=()
  (( $# )) && shift || __sm.log.fail "No extension was given."
  [[ -d "${extension_bin_path}" ]] || return 0
  #TODO: build actions cache and use it to display actions
  echo "${_actions[@]}"
}

# ### Usage Examples
#
#     user$ sm --call=internal/extensions/manipulation/__sm.extension.install backup mpapis/sm_backup
#
__sm.extension.install()
{
  typeset _name _uri _version _identifier
  _name="${1:-}"
  (( $# )) && shift || __sm.log.fail "No extension name was given."

  _uri="${1:-}"
  (( $# )) && shift || true
  [[ -n "${_uri}" ]] || _uri=$( __sm.extension.get.uri "${_name}" )

  [[ -n "${_uri}" ]] ||
    __sm.log.error "uri not given and cannot find ${_name} in known extensions."

  _version="head"
  if [[ "${_name}" == *:* ]]
  then
    _version="${_name/*:}"
  fi

  _identifier="$(scm_identifier "${_uri}")"

  __sm.log.step "${_name} ${_version}"
  if fetch_uri "${_uri}" "${src_path}/${_identifier}" "$@"
  then
    __sm.extension.is.valid "${src_path}/${_identifier}" ||
      __sm.log.error "${src_path}/${_identifier} is not a valid extension;"\
      "It is missing modules/ and/or bin/ files."

    #
    # TODO: Process extension dependencies...
    #

    versionedfs add \
      path "${exts_user_path}" name "${_name}" version "${_version}" \
      source "${src_path}/${_identifier}"

    versionedfs activate \
      path "${exts_user_path}" name "${_name}" version "${_version}"
  else
    return $?
  fi
}

__sm.extension.installed()
{
  typeset _token _type _modules _paths _excludes _exclude
  _paths=()
  _excludes=()
  args="$*"

  while (( $# > 0 ))
  do
    _token="$1" && shift
    case "${_token}" in
      (sets|exts)
        _paths+=("${sm_path}/${_token}")
        ;;
      (module|type)
        _type="$1"
        (( $# )) && shift || __sm.log.fail "An module type must follow the '${_token}' keyword"
        ;;
      (in)
        _paths="${1}"
        (( $# )) && shift || __sm.log.fail "A path must follow keyword 'in'"
        ;;
      (exclude)
        _exclude="${1}"
        (( $# )) && shift || __sm.log.fail "A string must follow keyword 'exclude'"
        _excludes+=("${_exclude//,/ }")
        ;;
      (*)
        __sm.log.fail "Unkown token ${_token} given"
        ;;
    esac
  done

  [[ -n ${_paths:-} ]] || {
    _paths=( "${sm_path}/sets" "${sm_path}/exts" )
    paths create "${_paths[@]}"
  }

  # TODO: convert this to in-process via shell globbing and looping.
  _modules=($( find "${_paths[@]}" -mindepth 2 -name "includes" -type f ))

  _excludes="${_excludes[*]:-'#'}"

  if [[ -n "${_type:-}" ]]
  then # Filter by type given
    "${sm_path}/bin/sm-ll" \
      if grep -q "'${_type}'" {} \; then echo {} \; fi ::: ${_modules[@]} |
        sed -e "s#${sm_path}/sets/##" -e "s#${sm_path}/exts/##" \
          -e "s#/shell/includes##" | sort | awk '!'"/${_excludes// /|}/"
  else
    echo ${_modules[@]} | awk '!'"/${_excludes// /|}/"
  fi
}
