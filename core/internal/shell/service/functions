#!/bin/sh

__sm.service.initialize()
{
  # TODO: Account for user service installs...
  # TODO: Merge service_paths and service_root_paths...
  # TODO: determine root_install vs user_install...
  if user is root
  then
    etc_path="/etc"
    var_path="/var"
  else
    etc_path="${packages_path}/active/etc"
    var_path="${packages_path}/active/var"
  fi

  true \
    "${init_scripts_path:="$(init_scripts_path)"}" \
    "${confd_path:="$(__sm.os.confd.path)"}" \
    "${service:="${extension:-${package_name}}"}" \
    "${service_version:="${package_version}"}" \
    "${prefix_path:="${sm_path}/active"}" \
    "${service_bin_path:="${active_path}/bin"}" \
    "${service_sbin_path:="${active_path}/sbin"}" \
    "${service_pid_path:="${var_path}/run/${service}"}" \
    "${service_pid_file:="${service_pid_path}/${service}.pid"}" \
    "${service_spool_path:="${var_path}/spool/${service}"}" \
    "${service_config_path:="${etc_path}/${service}"}" \
    "${service_db_path:="${var_path}/db/${service}"}" \
    "${service_data_path:="${var_path}/db/${service}/${service_version}"}" \
    "${service_log_path:="${var_path}/log/${service}"}" \
    "${service_lock_path:="${var_path}/lock/${service}"}" \
    "${service_src_path:="${source_path}/${service}-${service_version}"}" \
    "${service_config_file:="${service_config_path}/${service}.conf"}" \
    "${service_log_file:="${service_log_path}/${service}.log"}" \
    "${service_lock_file:="${service_lock_path}/${service}.lock"}" \
    "${service_ip:="0.0.0.0"}" \
    "${service_run_as_root_flag:=0}"

  if variable is empty service_version
  then
    config read file defaults from ${service} key version into service_version
  fi

  service_paths=(
    "${service_bin_path}"
    "${service_config_path}"
    "${service_pid_path}"
    "${service_spool_path}"
    "${service_data_path}"
    "${service_lock_path}"
    "${service_log_path}"
  )

  service_root_paths=(
    "${var_path}/spool/${service}"
    "${var_path}/log/${service}"
    "${var_path}/run/${service}"
    "${var_path}/lock/${service}"
    "${var_path}/db/${service}"
  )

  if user is root
  then
    if os is darwin
    then
      true "${service_user:="_${service}"}"
    else
      true "${service_user:="${service}"}"
    fi
  else
    true "${service_user:="$USER"}"
  fi

  typeset _path >/dev/null
  for _path in  "${install_path}/bin" "${install_path}/sbin"
  do
    if paths exist "$_path"
    then
      export PATH="${_path}:$PATH"
    fi
  done

  if [[ -z "${service_binary}" ]]
  then
    if __sm.command.exists ${service}
    then
      service_binary="$(__sm.command.full.name ${service})"
    fi
  fi

  service_actions+=( start stop restart )

  export service_paths service_actions service_flags

  service_pid=0
  if files exist "${service_pid_file}" && files are nonempty "${service_pid_file}"
  then
    read -r service_pid < "${service_pid_file}"
  fi

  export PATH="/bin:/usr/bin:${prefix_path}/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin:${PATH}"

  service_initialized=1
}

__sm.service.setup()
{
  (( $# == 0 )) || __sm.service.cli "$@"

  typeset _path _file >/dev/null

  #TODO: do not use apis in internal
  files source "${extension_path}"/shell/{functions,initialize,cli}

  if user is root
  then
    if ! user exists ${service_user}
    then user create system user "${service_user}" group "${service_user}" ; fi

    paths create "${service_root_paths[@]}"

    paths chown "${service_user}:${service_user}" recursive "${service_root_paths[@]}"
  fi

  paths create "${service_paths[@]}" "${install_path}"

  for _path in "${service_paths[@]}"
  do
    if [[ -n "${_path}" ]]
    then
      if paths exist "${_path}"
      then
        paths chown "${service_user}:${service_user}" recursive "${_path}"
      else
        __sm.log.warn "While chowning paths it was discovered that '${_path}' is in"\
          "fact nonexistent on the filesystem; this might indicate an error."
      fi
    fi
  done

  if  __sm.command.exists "${service}_service_setup"
  then
    "${service}_service_setup"
  fi

  __sm.service.initd.install "${service}"
}

__sm.service.uninstall()
{
  __sm.log.warn "service uninstall has not yet been implemented."
  # 1. Remove init scripts.
  # 2. Unload OS service hooks.
  # 3. Deactivate database path.
}

__sm.service.start()
{
  (( $# == 0 )) || __sm.service.cli "$@"

  [[ -n "${service}" ]] || __sm.log.fail "To start a service, you must set the 'service' variable."

  if __sm.command.exists "${service}_start"
  then
    __sm.log.step "Starting ${service}..."
    if "${service}_start"
    then
      __sm.log.step success
    else
      __sm.log.step failure
    fi
  else
    __sm.service.init.start
  fi
}

__sm.service.stop()
{
  if variables are empty service
  then
    __sm.log.fail "To start a service, you must set the 'service' variable."
  fi

  if __sm.command.exists "${service}_stop"
  then
    __sm.log.step "Stopping ${service}..."
    if "${service}_stop"
    then
      __sm.log.step success
    else
      __sm.log.step failure
    fi
  else
    __sm.service.init.stop
  fi
}

__sm.service.reload()
{
  (( $# == 0 )) || __sm.service.cli "$@"

  variables are nonempty service ||
    __sm.log.fail "To start a service, you must set the 'service' variable."

  if __sm.command.exists "${service}_reload"
  then
    "${service}_reload"
  else
    __sm.service.init.reload
  fi
}

__sm.service.restart()
{
  (( $# == 0 )) || __sm.service.cli "$@"

  variables are nonempty service ||
    __sm.log.fail "To start a service, you must set the 'service' variable."

  if __sm.command.exists "${service}_restart"
  then
    __sm.log.step "Restarting ${service}..."
    if "${service}_restart"
    then
      __sm.log.step success
    else
      __sm.log.step failure
    fi
  else
    __sm.service.init.restart
  fi
}

__sm.service.init.restart()
{
  if __sm.command.exists "${service}_restart"
  then
    __sm.log.step "Restarting ${service}..."
    if "${service}_restart"
    then
      __sm.log.step success
    else
      __sm.log.step failure
    fi
  else
    log "Restarting ${service}..."
    __sm.service.init.stop $@
    __sm.service.init.start $@
  fi
}

__sm.service.logtail()
{
  (( $# == 0 )) || __sm.service.cli "$@"

  variables are nonempty service ||
    __sm.log.fail "To start a service, you must set the 'service' variable."

  if __sm.command.exists "${service}_logtail"
  then
    "${service}_logtail"
  else
    __sm.service.init.logtail
  fi
}

__sm.service.info()
{
  (( $# == 0 )) || __sm.service.cli "$@"

  [[ -n "${service}" ]] ||
    __sm.log.fail "In order to get info on a service, the 'service' variable must be set."

  if __sm.command.exists "${service}_info"
  then
    "${service}_info"
  else
    __sm.service.init.info
  fi
}

__sm.service.configcheck()
{
  (( $# == 0 )) || __sm.service.cli "$@"

  variables are nonempty service ||
    __sm.log.fail "To configcheck a service, the 'service' variable must be set."

  if __sm.command.exists "${service}_configcheck"
  then
    "${service}_configcheck"
  else
    service_init_configcheck
  fi
}

__sm.service.usage()
{
  # TODO: Update this for service specific items.
  printf "
Usage:

  $0 [options]

Options:

  --prefix   - specify prefix path
  --src)     - specify source directory
  --user)    - specify user to install as
  --version) - specify version to install
  --licence) - view licence
  --help)    - view this usage information

  "
  return 0
}

__sm.service.cli()
{
  typeset _ignored_args _service_args _token index number_of_args >/dev/null
  _ignored_args=()
  _service_args=( $@ )
  number_of_args=${#extension_args[@]}
  #TODO Question: which ^ params should be checked here ?

  for (( index=1 ; index <= $number_of_args ; index++ ))
  do
    token="${extension_args[$index]}"

    case "$token" in
      (user)
        service_user="${extension_args[$((++index))]}"
        [[ -n "${service_user}" ]] ||
          __sm.log.error "a user name must follow keyword 'user'"
        ;;
      (version)
        service_version="${extension_args[$((++index))]}"
        [[ -n "${service_version}" ]] ||
          __sm.log.error "a version number string must follow keyword 'version'"
        ;;
      (data)
        service_data_path="${_package_args[$((++index))]}"
        [[ -n "${service_data_path}" ]] ||
          __sm.log.error "a path must follow keyword 'data'"
        ;;
      (pid)
        service_pid_path="${_package_args[$((++index))]}"
        [[ -n "${service_pid_path}" ]] ||
          __sm.log.error "a path must follow keyword 'pid'"
        ;;
      (log)
        service_log_path="${_package_args[$((++index))]}"
        [[ -n "${service_log_path}" ]] ||
          __sm.log.error "a path must follow keyword 'log'"
        ;;
      (config)
        service_config_path="${_package_args[$((++index))]}"
        [[ -n "${service_config_path}" ]] ||
          __sm.log.error "a path must follow keyword 'config'"
        ;;
      (lock)
        service_lock_path="${_package_args[$((++index))]}"
        [[ -n "${service_lock_path}" ]] ||
          __sm.log.error "a path must follow keyword 'lock'"
        ;;
      (db)
        service_db_path="${_package_args[$((++index))]}"
        [[ -n "${service_db_path}" ]] ||
          __sm.log.error "a path must follow keyword 'db'"
        ;;
      (help)
        __sm.service.usage
        exit 0
        ;;
      (--trace)
        set -o xtrace
        ;;
      *)
        _ignored_args+=("${token}")
        ;;
    esac
  done

  extension_args=( "${_ignored_args[@]}" )

  __sm.service.initialize "${extension_args[@]}"
}

__sm.service.pid()
{
  typeset _pid _path >/dev/null
  _path="${run_path:="/var/run"}/${service}"
  _pid=0

  paths create "${_path}"

  if ! files are empty "${_path}/${service}.pid"
  then
    read -r _pid < "${_path}/${service}.pid"
    if os is linux
    then # Sanity check.
      if ! paths exist "/proc/${pid}"
      then
        _pid=0
        rm -f "${_path}/${service}.pid"
      fi
    fi
  fi

  service_pid=${_pid}

  return 0
}

__sm.service.load.confd()
{
  files source "${confd_path}/${service}.conf"
}

__sm.service.initd.install()
{
  typeset _service _version >/dev/null
  _service="${1:-}"
  (( $# )) && shift ||fail "Service name was not passed in as the first parameter"
  _version="${1:-${service_version}}"

  if ! paths exist "${init_scripts_path}"
  then
    return 0 # No bin/ dir, no need for it to be in the path.
  fi

  if user is root
  then
    paths create "/etc/conf.d" "${init_scripts_path}"

    # TODO: Install the service init script...
    if templates exists "${_service}"
    then
      templates install "${_service}" to "${init_scripts_path}/${_service}" \
        mode 0755
    else
      # Use core svc init.d template
      templates install "cli/init.d" \
        to "${init_scripts_path}/${_service}" mode 0755

      templates seed "${init_scripts_path}/${_service}" \
        modules_path "${__sm_modules_path}" \
        service "${service}" \
        service_user "${service_user}" \
        service_config_path "${service_config_path}"
    fi

    __sm.service.activate "${service}" "${service_version}"

    # TODO: Replace this with install_template + seed_template
    files write \
      string "%s\n" "[ -d \"${prefix_path}/${_service}/active/bin\" ] && " \
      to "/etc/profile.d/${_service}.sh"

    files write append \
      string "%s\n" "PATH=\"\$PATH:${prefix_path}/${_service}/active/bin\" ; export PATH; " \
      to "/etc/profile.d/${_service}.sh"

    files chmod 0755 "/etc/profile.d/${_service}.sh"
  fi
}

__sm.service.init.start()
{
  __sm.log.step "Starting ${service}..."

  typeset _result _command _prefix _type >/dev/null
  _result=0
  _command=( "${service_binary}" )

  if [[ -n "${service_start_flags}" ]]
  then _command+=("${service_start_flags[@]}") ; fi

  if [[ -n "${service_flags}" ]]
  then _command+=("${service_flags[@]}") ; fi

  if (( service_run_as_root_flag ))
  then
    user is root || _prefix="sudo"
    if ! ${_prefix} ${_command[*]}
    then
      __sm.log.step failure
      __sm.log.error "${service} failed to start."
    fi
  else
    if (( ${service_run_as_user_flag:-0} )) && __sm.command.run.as "${service_user}" "" "${_command[*]}"
    then
      __sm.log.succeed "${service} successfully started."
    elif ${_command}
    then
      __sm.log.succeed "${service} successfully started."
    else
      __sm.log.step failure
      log "${service} failed to start; check ${service_log_file} for details:"
      exec tail -n 50 "${service_log_file}"
      __sm.log.error
    fi
  fi
  __sm.log.step success
}

__sm.service.init.stop()
{
  (( service_pid > 0 )) || __sm.log.error "Service pid has not been set, or is zero."
  __sm.log.step "Stopping ${service}..."
  if __sm.command.exists "${service}_stop"
  then
    "${service}_stop"
  else
    if kill -QUIT "${service_pid}"
    then
      rm -f "$service_pid_file"
    else
      __sm.log.step failure
      return $?
    fi
  fi
  __sm.log.step success
}

__sm.service.init.status()
{
  log "statusing ${service}..."

  typeset _command _prefix >/dev/null
  _command=( "${service_binary}" )

  if [[ -n "${service_status_flags}" ]]
  then
    _command+=("${service_status_flags[@]}")
  fi

  if [[ -n "${service_flags}" ]]
  then
    _command+=("${service_flags[@]}")
  fi

  if (( service_run_as_root_flag == 1 ))
  then
    user is root || _prefix="sudo"

    if ${_prefix} ${_command[*]}
    then
      true
    else
      __sm.log.error "failed check status of ${service}."
    fi
  else
    if (( ${service_run_as_user_flag:-0} )) && __sm.command.run.as "${service_user}" "" "${_command[*]}"
    then
      touch "$service_pid_file"
      succeed
    elif ${_command}
    then
      touch "$service_pid_file"
      succeed
    else
      __sm.log.error "failed check status of ${service}."
    fi
  fi
}

__sm.service.init.reload()
{
  log "reloading ${service}..."

  typeset _command >/dev/null
  _command=( "${service_binary}" )

  if [[ -n "${service_reload_flags}" ]]
  then
    _command+=("${service_reload_flags[@]}")
  fi

  if [[ -n "${service_flags}" ]]
  then
    _command+=("${service_flags[@]}")
  fi

  if (( ${service_run_as_user_flag:-0} )) && __sm.command.run.as "${service_user}" "" "${_command[*]}"
  then
    touch "$service_pid_file"
  elif ${_command}
  then
    touch "$service_pid_file"
  else
    return $?
  fi
}

__sm.service.init.usage()
{
  log "Usage:"
  log "  $0 {start|stop|restart|status|info|logtail}"
}

__sm.service.init.logtail()
{
  typeset _lines >/dev/null
  _lines="${1:-10}"
  tail -n ${_lines} "${service_log_file}"
}

__sm.service.init.info()
{
  NIY "service init info has not yet been implemented for the service module."
}

__sm.service.confd()
{
  # TODO: Install a default conf.d template if extension does not define one.
  templates exist "conf.d" || return 0

  templates install "conf.d.template" to "/etc/conf.d/${service}.conf" \
    mode 0644 owner "${service_user}:${service_user}"

  if templates exist "/etc/conf.d/${service}.conf"
  then
    templates seed "/etc/conf.d/${service}.conf" \
      prefix_path "${prefix_path}" \
      init_scripts_path "${init_scripts_path}" \
      modules_path "${__sm_modules_path}" \
      confd_path "${confd_path}" \
      extension "${service}" \
      service "${service}"
  fi
}

__sm.service.init.action()
{
  typeset _action >/dev/null
  _action="${1:-}"

  __sm.service.load.confd

  if __sm.command.exists "${service}_${action}"
  then
    "${service}_${action}"
  else
    if [[ "${service_actions[*]}" = *[[:space:]]${action}[[:space:]]* ]]
    then
      service_init_${action}
    else
      __sm.service.init.usage
    fi
  fi

  return $?
}

__sm.service.initd()
{
  __sm.service.load.confd # Load the configuration file.
  [[ -x "${service_binary}" ]] || __sm.log.fail "'${service_binary}' not found/executable."
  __sm.service.pid
  __sm.service.cli
  __sm.service.init.action "${service_action}"
}

__sm.service.deactivate()
{
  typeset _service >/dev/null
  _service="${1:-"${service}"}"

  [[ -n "${_service}" ]] || __sm.log.fail "Service name must be set or given to deactivate."

  if files exist "${init_scripts_path}/${_service}"
  then
    files chmod 0644 "${init_scripts_path}/${_service}"

    if user is root
    then # Add service to system startup
      if os is darwin
      then
        true # TODO: launchctl

      elif __sm.command.exists rc-update
      then
        if ! rc-update add ${service} default
        then
          log warn "'rc-update ${service} add default' did not work as expected, check the first six lines of /etc/init.d/${service}."
        fi
      elif __sm.command.exists chkconfig
      then
        if file contains regex 'chkconfig' "/etc/init.d/${service}" &&  ! chkconfig ${service} on
        then
          log warn "'chkconfig ${service} on' did not work as expected, check the first six lines of /etc/init.d/${service}."
        fi
        # elif __sm.command.exists svc
        # then
        #   svc ${service} on # TODO: daemontools start on boot

      else # Fall back on rc.local to start redis at system startup.
        if files exist "/etc/rc.local"
        then
          if ! files contain string "${service} start" "/etc/rc.local"
          then
            files write append string "${init_scripts_path}/${service} start" \
              to /etc/rc.local
          fi
        fi
      fi
    fi
  fi
  # TDOO: hook into system's paths.
}

__sm.service.activate()
{
  typeset _service _version >/dev/null
  _service="${1:-"${service}"}"
  (( $# )) && shift || __sm.log.fail "The service name must be set or given to activate a service."

  _version="${1:-${service_version}}"

  [[ -n "${_version}" ]] || __sm.log.fail "Version must be set or given to activate a service."

  if files are symlinks "${service_db_path}/active"
  then # TODO: use versionedfs to check if a version is active.
    __sm.service.deactivate "${_service}"
  fi

  if paths exist "${service_db_path}/${_version}"
  then
    log "Activating service ${_service} version ${_version}."

    files link symbolic force \
      from "${service_db_path}/${_version}" \
      to "${service_db_path}/active"

    if files exist "${init_scripts_path}/${service}"
    then
      files chmod 0755 "${init_scripts_path}/${service}"

      if os is linux
      then
        if user is root
        then # Add service to system startup
          if __sm.command.exists rc-update
          then
            if ! rc-update add ${service} default
            then
              log warn "'rc-update ${service} add default' did not work as expected, check the first six lines of /etc/init.d/${service}."
            fi
          elif __sm.command.exists chkconfig
          then
            if file contains regex 'chkconfig' "/etc/init.d/${service}" &&  ! chkconfig ${service} off
            then
              log warn "'chkconfig ${service} off' did not work as expected, check the first six lines of /etc/init.d/${service}."
            fi

            #elif __sm.command.exists svc
            #then
            #  svc ${service} off
            #  TODO: daemontools remove start on boot

          else # Fall back on rc.local to start redis at system startup.
            if ! files contain string "${service} start" "/etc/rc.local"
            then
              sed -i -e "d#${init_scripts_path}/${service} start#" /etc/rc.local
            fi
          fi
        fi
      elif os is darwin
      then
        true # TODO: launchctl
      else # ::shrug::
        if files exist "/etc/rc.local"
        then
          if ! files contain string "${service} start" "/etc/rc.local"
          then
            # TODO: change this to use replace_content
            sed -i -e "d#${init_scripts_path}/${service} start#" /etc/rc.local
          fi
        fi
      fi
    fi
  fi
}

__sm.service.status()
{
  __sm.process.status "${service}" "${service_pid_file}" # ${service_pid}

  if __sm.command.exists "${service}_status"
  then # Run the service specific status function, if it exists
    "${service}_status"
  fi
}

__sm.service.signal()
{
  log warn "__sm.service.signal is deprecated, instead use __sm.process.signal from api/process"
  __sm.process.signal $@
}

